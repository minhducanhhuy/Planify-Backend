generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model notifications {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String?   @db.Uuid
  content    String?
  type       String?   @db.VarChar(50)
  is_read    Boolean?  @default(false)
  data       Json?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model history_activities {
  id        String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  task_id   String?   @db.Uuid
  user_id   String?   @db.Uuid
  action    String?
  timestamp DateTime? @default(now()) @db.Timestamp(6)
  details   Json?
  tasks     tasks?    @relation(fields: [task_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users     users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user_settings {
  id      String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id String? @db.Uuid
  theme   String? @db.VarChar(50)
  users   users?  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  	@@unique([user_id])
}

model users {
  id                  String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  full_name           String?               @db.VarChar(255)
  email               String                @unique @db.VarChar(255)
  password            String?
  avatar_url          String?
  created_at          DateTime?             @default(now()) @db.Timestamp(6)
  provider            AuthProvider          @default(local)  
  board_user_settings board_user_settings[]
  board_users         board_users[]
  boards              boards[]
  comment_reactions   comment_reactions[]
  comments            comments[]
  history_activities  history_activities[]
  notifications       notifications[]
  recent_boards       recent_boards[]
  star_boards         star_boards[]
  tasks               tasks[]
  user_settings       user_settings[]
  workspace_users     workspace_users[]
  workspaces          workspaces[]
  password_reset_tokens password_reset_tokens[]
}

model password_reset_tokens {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String   @db.Uuid
  token      String   @unique
  expires_at DateTime
  created_at DateTime @default(now()) @db.Timestamp(6)
	used       Boolean  @default(false)

  user       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model workspace_users {
  id           String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  workspace_id String?     @db.Uuid
  user_id      String?     @db.Uuid
  role         WorkspaceRole     @default(member)
  users        users?      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  workspaces   workspaces? @relation(fields: [workspace_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([workspace_id, user_id])
}

model workspaces {
  id              String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String?           @db.VarChar(255)
  created_by      String?           @db.Uuid
  boards          boards[]
  workspace_users workspace_users[]
  users           users?            @relation(fields: [created_by], references: [id], onUpdate: NoAction)
}

model recent_boards {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  board_id    String?   @db.Uuid
  user_id     String?   @db.Uuid
  accessed_at DateTime? @default(now()) @db.Timestamp(6)
  boards      boards?   @relation(fields: [board_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users       users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  @@unique([board_id, user_id])
}

model star_boards {
  id       String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  board_id String? @db.Uuid
  user_id  String? @db.Uuid
  boards   boards? @relation(fields: [board_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users    users?  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  @@unique([board_id, user_id])
}

model board_user_settings {
  id         String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  board_id   String? @db.Uuid
  user_id    String? @db.Uuid
  background String?
  boards     boards? @relation(fields: [board_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users?  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  @@unique([board_id, user_id])
}

model board_users {
  id       String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  board_id String? @db.Uuid
  user_id  String? @db.Uuid
  role     BoardRole @default(viewer)
  boards   boards? @relation(fields: [board_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users    users?  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
   @@unique([board_id, user_id])
}

model boards {
  id                  String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                String?               @db.VarChar(255)
  workspace_id        String?               @db.Uuid
  created_by          String?               @db.Uuid
  theme               String?               @db.VarChar(100)
  created_at          DateTime?             @default(now()) @db.Timestamp(6)
  board_user_settings board_user_settings[]
  board_users         board_users[]
  users               users?                @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  workspaces          workspaces?           @relation(fields: [workspace_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  lists               lists[]
  recent_boards       recent_boards[]
  star_boards         star_boards[]
  tasks               tasks[]
}

model comment_reactions {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  comment_id String?   @db.Uuid
  user_id    String?   @db.Uuid
  emoji_type String?   @db.VarChar(50)
  comments   comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model comments {
  id                String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  task_id           String?             @db.Uuid
  user_id           String?             @db.Uuid
  content           String?
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  updated_at        DateTime?           @default(now()) @db.Timestamp(6)
  comment_reactions comment_reactions[]
  tasks             tasks?              @relation(fields: [task_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users             users?              @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model lists {
  id       String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  board_id String? @db.Uuid
  name     String? @db.VarChar(255)
  position Float?
  boards   boards? @relation(fields: [board_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tasks    tasks[]
}

model tasks {
  id                 String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  list_id            String?              @db.Uuid
  board_id           String?              @db.Uuid
  title              String?              @db.VarChar(255)
  description        String?
  tag                String?              @db.VarChar(100)
  status             String?              @db.VarChar(50)
  position           Float?
  due_date           DateTime?            @db.Timestamp(6)
  created_by         String?              @db.Uuid
  created_at         DateTime?            @default(now()) @db.Timestamp(6)
  is_done            Boolean?             @default(false)
  comments           comments[]
  history_activities history_activities[]
  boards             boards?              @relation(fields: [board_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users              users?               @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  lists              lists?               @relation(fields: [list_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  todos             todos[]
}

model todos {
  id      String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  task_id String? @db.Uuid
  title   String? @db.VarChar(255)
  position Float?
  items   items[]
  tasks   tasks?  @relation(fields: [task_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model items {
  id       String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  to_do_id String?  @db.Uuid
  content  String?
  position Float?
  is_done  Boolean? @default(false)
  todos   todos?  @relation(fields: [to_do_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum AuthProvider {
  local
  google
}

enum WorkspaceRole {
  owner
  admin
  member
}

enum BoardRole {  
  editor
  commenter
  viewer
}
